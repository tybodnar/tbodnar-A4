const e=location.pathname.split("/").slice(0,-1).join("/"),p=[e+"/_app/immutable/entry/app.COpdNtQm.js",e+"/_app/immutable/nodes/0.idF2SCCN.js",e+"/_app/immutable/nodes/1.xq7xOU8P.js",e+"/_app/immutable/nodes/2.BUo8M2J_.js",e+"/_app/immutable/assets/2.BZxHScZK.css",e+"/_app/immutable/chunks/entry.0gw1zmh9.js",e+"/_app/immutable/chunks/index.BXwGqzWn.js",e+"/_app/immutable/chunks/index.riwe47ij.js",e+"/_app/immutable/chunks/scheduler.BAwge4yL.js",e+"/_app/immutable/entry/start.CM7X4R-6.js"],l=[e+"/check.png",e+"/favicon.png",e+"/manifest.json"],u="1712687001684",i=`cache-${u}`,r=[...p,...l];self.addEventListener("install",s=>{async function n(){await(await caches.open(i)).addAll(r)}s.waitUntil(n())});self.addEventListener("activate",s=>{async function n(){for(const a of await caches.keys())a!==i&&await caches.delete(a)}s.waitUntil(n())});self.addEventListener("fetch",s=>{if(s.request.method!=="GET")return;async function n(){const a=new URL(s.request.url),c=await caches.open(i);if(r.includes(a.pathname)){const t=await c.match(a.pathname);if(t)return t}try{const t=await fetch(s.request);if(!(t instanceof Response))throw new Error("invalid response from fetch");return t.status===200&&c.put(s.request,t.clone()),t}catch(t){const o=await c.match(s.request);if(o)return o;throw t}}s.respondWith(n())});
